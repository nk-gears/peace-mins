  let serviceWorker;
  const registerWorker = (workerFileName) => {
    navigator.serviceWorker.register(workerFileName).then(
      function (reg) {
        
        if (reg.installing) {
          serviceWorker = reg.installing;
          // console.log('Service worker installing');
        } else if (reg.waiting) {
          serviceWorker = reg.waiting;
          // console.log('Service worker installed & waiting');
        } else if (reg.active) {
          serviceWorker = reg.active;
          // console.log('Service worker active');
        }

        if (serviceWorker) {
          console.log("sw current state", serviceWorker.state);
          if (serviceWorker.state == "activated") {
            //If push subscription wasnt done yet have to do here
            console.log("sw already activated - Do watever needed here");
          }
          serviceWorker.addEventListener("statechange", async function (e) {
            console.log("sw statechange : ", e.target.state);
            if (e.target.state == "activated") {
              // use pushManger for subscribing here.
              console.log(
                "Just now activated. now we can subscribe for push notification"
              );
              await subscribeForPushNotification(reg);
            }
          });
        }
      },
      function (err) {
        console.error("unsuccessful registration with ", workerFileName, err);
      }
    );

  const requestNotification = (_userInfo) => {
    if (isBrowser()) {
      window.Notification.requestPermission().then((permission) => {
        if (permission !== "granted") return;
      });

      if (window.Notification.permission) {
        registerWorker("/workers/notification_sw.js");
      }
    }
  };

};


  const isBrowser = () => typeof window !== "undefined";

  const subscribeForPushNotification = async (worker) => {
    if (!("PushManager" in window)) {
      console.log("Push messaging isn't supported.");
      return;
    }
    //
    if (Notification.permission === "denied") {
      console.log("The user has blocked notifications.");
      return;
    }

    let subscription = await worker.pushManager.getSubscription();
    console.log(
      "subscription activated"
    );
    if (!subscription) {
      const publicKey = await fetch("/api/sub").then((res) => res.json());

      subscription = await worker.pushManager.subscribe({
        applicationServerKey: publicKey.pubKey,
        userVisibleOnly: true,
      });
    }
    const tzOffset = new Date().getTimezoneOffset();
    console.log(userInfo);
    await fetch("/api/sub", {
      method: "POST",
      body: JSON.stringify({
        tzOffset: tzOffset,
        userId: _userInfo.id,
        subscription,
      }),
    });




  
  };

